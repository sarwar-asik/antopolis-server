pick 9e2a35b98fc0ca56c44b08ae3691e3f9a13a1ab9 updated Readme and USER
pick fe43a3a7a02f073e5a9ddc78d349aba1fae6cdbe bug(server): fixed running bug of the server
pick 97d357a9635c8ae2f2fbc8dc69f547af13601f3a bug(server): fixed running bug of the server
pick 5787d70a11a50a1a661e71fbf5b21b61ce96d011 auth(sign0up): optimized #signup
pick 1b655f981281b9600861f6c2d6cf6dc761102d6d #auto_gerate files included
pick 6dd9c1c193f60232acab3848f2840de522b0d6f2 server: #optimizes corse and mongoose policy
pick 883577a9f403d668819a7ac0cc6aac3f90c26bab module(image): #imageServer created
pick 27da9bb79b800e951f58e439c4ae6d66a52cf5b7 module(image): #imageRoute included
pick d5ffe57d7d6f5fa246468edf6f70d49b5e69a14b server: #build done
pick 33b94f538ec1580454cfc2ac06c8a41a1c338ccc module(image): #multer setup

# Rebase 23a2c36..33b94f5 onto 23a2c36 (10 commands)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
#                    commit's log message, unless -C is used, in which case
#                    keep only this commit's message; -c is same as -C but
#                    opens the editor
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
#         create a merge commit using the original merge commit's
#         message (or the oneline, if no original merge commit was
#         specified); use -c <commit> to reword the commit message
# u, update-ref <ref> = track a placeholder for the <ref> to be updated
#                       to this position in the new commits. The <ref> is
#                       updated at the end of the rebase
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
